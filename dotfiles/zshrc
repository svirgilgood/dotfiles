# Set up the prompt

#autoload -Uz promptinit
#promptinit
#prompt adam1


#PROMPT
# to crontab add `10 * * * apt list -upgradable > ~/.updates
# to sudo crontab add 15 * * * apt update
[[ -n $SSH_TTY ]] && host="%F{green}%m%f:"
precmd() {
  PROMPT="$host%F{blue}%~%f> "
  updates="$(cat ~/.updates | wc -l)" 2> /dev/null
  branch=$(git branch | fgrep '*') 2> /dev/null
  if [[ -n $branch ]]; then
    [[ -n $(git status -s) ]] 2> /dev/null && colo='red' || colo='green'
    PROMPT="%F{$colo}${branch#* }%f|$PROMPT"
  fi
  if [[ $VIRTUAL_ENV ]]; then 
      PROMPT="$(basename $VIRTUAL_ENV)|$PROMPT"
  fi
  [[ $updates != 1 && -n $updates ]] && PROMPT="%F{yellow}$(($updates -1 ))%f|$PROMPT"
  [[ $USER = 'root' ]] && PROMPT="%F{yellow}%m%f:%F{red}%~%f# "
  PROMPT2=$(print -P $PROMPT|sed 's/././g')
}


setopt histignorealldups sharehistory

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -v

#source ~/.bashrc 
#source ~/.bash_profile

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history

# Use modern completion system
autoload -Uz compinit
compinit

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.plugin.zsh 
source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
#source $HOME/.cargo/env


# aliases

alias info='info --vi-keys'
#alias vim=nvim
alias ls='ls --color=auto'
export PATH="~/anaconda3/bin:$PATH"
export PATH="$HOME/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"
export EDITOR="/usr/bin/vim"

socks() {
    port='10000' 
    addr='sgoodwin@192.168.31.195'
    echo 'ssh -D '"$port""$addr"
    ssh -D "$port" "$addr"
}

pp() {
    xclip -o -selection clipboard
}

yy() {
    xclip -i -selection clipboard
}

pi() {
    xclip -o -selection clipboard | xclip -i -selection primary
}

mm() {
    sshfs "$SERVER":smith "$HOME"/Documents/media/ 
    echo 'Music Folder Mounted!'
}

macmount() {
    sshfs "$MACCLIENT":Documents "$HOME"/Documents/mac && echo "Mac Mounted" || echo "Failed to Mount Mac"
}

libgen() {
    url='http://gen.lib.rus.ec/search.php?req='"$@"
    w3m "$url"
}
c() {
    dir="$(dirlog-cd "$@")"
        if [ "$dir" != "" ]; then
            cd "$dir" && ls
        fi
}
ll(){
    ls -lahG "$@"
}
tmux-helper() { 
	cd ~/bin/tmux-2.2
	nroff -mdoc tmux.1|less 
}
bibsync() {
	rsync --progress -kr "$HOME"/Documents/cifshare/LIS "$SERVER":Documents/
}
zathy() {
	zathura "$@" 2> /dev/null &
}
supsu() {
    sudo apt upgrade -y
    apt list --upgradable > ~/.updates
}
dream() {
    mosh "$SERVER" --server=/home/echindod3/login.sh 
}
lis() {
    rsync --progress "$@" "$SERVER":library.edubbainstitute.org/LIS/
}
macsync() {
    rsync --progress "$@" "$MACCLIENT":Desktop
}
macmocp() {
    ssh -t "$MACCLIENT" mocp "$@";
}
cifmount() {
    user="$(users)"
    sudo mount -t cifs -o uid=$user,credentials=/etc/cifspwd,file_mode=0664,rw,iocharset=utf8,vers=1.0,gid=sambashare //192.168.18.85/fs/Departments/Production /mnt/cifs/Production
}
hs() {
    iconv -t ISO-8859-8 | hspell "$@" | iconv -f ISO-8859-8;
}
db() {
    rlwrap sqlite3 "$@"
} 
timecard() {
    pp | rep -F '\t' 'd.setdefault(f[2].split()[0], []).append(float(f[4]))' -e 'map(lambda x: (x[0], sum(x[1])), d.items())'
}

export PATH=~/.gem/ruby/2.3.0/bin:$PATH

export WORKON_HOME=$HOME/.virtualenvs
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
export PROJECT_HOME=$HOME/Devel
source /usr/local/bin/virtualenvwrapper.sh
# This line disables the Software Flow Contol (XON/XOFF)
stty -ixon 

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
